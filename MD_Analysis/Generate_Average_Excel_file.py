import numpy as np
import os, sys, stat
from datetime import datetime, date, time
from math import sqrt
import  matplotlib
matplotlib.use('Agg')
import  matplotlib.pyplot as plt
from argparse import ArgumentParser
import openpyxl
from openpyxl.styles import Font



'''
###########################################
###              USAGE                  ### 
###                                     ###
###########################################

python3 Generate_Average_Excel_file.py -excel_path /home/guillem/Downloads/Transfer_files/mpro0003/dyn_1/0003_all_dyns_summary.xlsx

# You only need one argument that it's the Excel file generated by the Generate_Summary_Excel

And also you must have executed Generate_Summary_Excel before executing Generate_Average_Table

'''

##################
##     MAIN     ##
##################

def main():
    # Get the initial directory we are wortking with.
    DIR = os.getcwd()
    
    # List the files we have in the initial directory.
    list_DIR = os.listdir(DIR)
    
    # Print the initial directory.
    print(" Initial Dir : ", DIR)
    print("  ")

    #####################
    ## Parse arguments ##
    #####################
    
    # Get the arguments needed.
    args = cmdlineparse()
    
    # Get the path of the excel file.
    excel_path = args.excel_path
    
    # Define the number of dyns we have.
    num_dyns = 4

    #####################
    ###   Open Excel  ###
    #####################
    
    # Print the start information of reading the Excel file.
    print(">>> Start reading Excel file.")
    
    # Read Excel file with 4 dyns.
    wb_obj = openpyxl.load_workbook(excel_path)
    
    # Activate reading the Excel file.
    sheet_obj = wb_obj.active
    
    ########################################################
    ### Get which ligand we are studying and create file ###
    ########################################################
    
    # Print the first step.
    print("1. Create Excel file with headers of the table.")

    # Open Workbook.
    wb_output = openpyxl.Workbook()
    
    # Craete a sheet called Sheet in the workbook.
    sheet_output = wb_output.create_sheet("Sheet")
    
    # Active the workbook to be able to add values.
    hoja = wb_output.active
    
    # Obtain the cell of the simulation time of the Excel file.
    cell_obj_simulationtime = sheet_obj.cell(row = 3, column = 1)
    
    # Obtain the value of the cell of the simulation time.
    simulation_time = cell_obj_simulationtime.value

    # Obtain the cell of the ligand.
    cell_obj_ligand = sheet_obj.cell(row = 3, column = 2)
    
    # Obtain the value of the ligand cell.
    ligand = cell_obj_ligand.value

    # Obtain the cell that includes the Molecule.
    cell_obj_molecule = sheet_obj.cell(row = 3, column = 3)
    
    # Obatin the value of the Molecule cell.
    molecule = cell_obj_molecule.value
    
    # Define count_excel = 2 (line 2 where header goes) to count the lines readed in the Excel file.
    count_excel = 2
    
    # Start creating the new Excel with new data
    # Write in A1 the Molecule name obtained.
    hoja["A1"] = molecule.upper()
    
    # Write in A3 the simulation time obtained.
    hoja["A3"] = simulation_time
    
    # Write in B3 the ligand studied obtained previously.
    hoja["B3"] = ligand
    
    # Define the header of the Average Excel in line count_excel.
    hoja["A" + str(count_excel)] = "Simulation time"
    hoja["B" + str(count_excel)] = "Ligand"
    hoja["C" + str(count_excel)] = "Bindi3ng Site"
    hoja["D" + str(count_excel)] = "Number of Reactive Trajectories"
    hoja["E" + str(count_excel)] = "Best MMGBSA"
    hoja["F" + str(count_excel)] = "Avg. MMGBSA"
    hoja["G" + str(count_excel)] = "Best % SASA"
    hoja["H" + str(count_excel)] = "Avg. % SASA"
    hoja["I" + str(count_excel)] = "Best RT"
    hoja["J" + str(count_excel)] = "Avg. RT"
    hoja["K" + str(count_excel)] = "Best LIE"
    hoja["L" + str(count_excel)] = "Avg. LIE"
    hoja["M" + str(count_excel)] = "Best HB"
    hoja["N" + str(count_excel)] = "Avg. HB"

    # Put the letters as bold text (because it is the header).
    hoja["A1"].font = Font(bold=True)
    hoja["A" + str(count_excel)].font = Font(bold=True)
    hoja["B" + str(count_excel)].font = Font(bold=True)
    hoja["C" + str(count_excel)].font = Font(bold=True)
    hoja["D" + str(count_excel)].font = Font(bold=True)
    hoja["E" + str(count_excel)].font = Font(bold=True)
    hoja["F" + str(count_excel)].font = Font(bold=True)
    hoja["G" + str(count_excel)].font = Font(bold=True)
    hoja["H" + str(count_excel)].font = Font(bold=True)
    hoja["I" + str(count_excel)].font = Font(bold=True)
    hoja["J" + str(count_excel)].font = Font(bold=True)
    hoja["K" + str(count_excel)].font = Font(bold=True)
    hoja["L" + str(count_excel)].font = Font(bold=True)
    hoja["M" + str(count_excel)].font = Font(bold=True)
    hoja["N" + str(count_excel)].font = Font(bold=True)
    
    # Add one value to the count_excel (to go to the next line).
    count_excel += 1

    #######################################################
    ### Separate table of dyn_1, dyn_2, dyn_3 and dyn_4 ###
    #######################################################
    # Print the next step.
    print("2. Get the BS we have in th Excel file.")
    
    # Define the list where we are going to save the BS.
    list_BS = list()
    
    # Define the counter of BS (BS1, BS2, BS3, etc).
    count = 1
    
    # Iterate all the rows.
    for row in sheet_obj.rows:
        # If the value of the 8th cell is equal to BS1, we add BS1 to the defined list (list_BS) and increase the ocunter one unit.
        if row[8].value == ("BS" + str(count)):
            # Put the value (BSX) in the list of BS.
            list_BS.append(row[8].value)
            
            # Add one value to count (to go to the next BS).
            count += 1
            
    #######################################################
    ###           Get the rows of each BS               ###
    #######################################################
    # Print the next step.
    print("3. Create Dictionary to save the BS information.")

    # Create the dictionary to save the data of each Binding site (BS).
    dict_all_values = dict()
    
    # Iterate all the Binding Sites (BS).
    for BS in list_BS:
        # Define a list to save the rows that has each Binding site (BS).
        llista_rows_BS = list()
        
        # Iterate all the rows of the Excel file.
        for row in sheet_obj.rows:
            # Define a list to include the values of the rows that we want to include.
            llista_row = list()

            # If the value (of the 8th column) is equal to the BS.
            if row[8].value == BS:
                # Iterate all the cells in the row.
                for cell in row:
                    # Add the values of the row in the list of each row.
                    llista_row.append(cell.value)
                    
            # If the list that has the values of the row is not empty.
            if len(llista_row) != 0:
                # Add the list of the row in the DataTable of each BS.
                llista_rows_BS.append(llista_row)  
                
        # If the list of all rows is not empty.
        if len(llista_rows_BS) != 0:
            # Add the Datatable in the dictionary of each BS.
            dict_all_values[BS] = llista_rows_BS
    
    ###################################################################
    ### Go through the information of each BS and calculate the avg ###
    ###################################################################
    # Print the next step.
    print("4. Calculate the avergae for each descriptor and for each Binding site.")

    # Iterate all the Binding Sites (BS).
    for BS in dict_all_values:
        # Count how mnay BS we have in the four dynamics.
        count_dyns = len(dict_all_values[BS])
        
        # Define the descriptors which we want to calculate the average.
        avg_LIE = 0
        avg_Residence_time = 0
        avg_Delta_G = 0
        avg_SASA = 0
        avg_HB = 0

        # Define the list of Descriptros which we want to create the average (to know the best vale f.ex. maximum or minimum).
        LIE_list = list()
        RT_list = list()
        Delta_G_list = list()
        SASA_list = list()
        HB_list = list()

        # For each BS iterate the datatable we have (with all the rows that contains the BS we are analysing).
        for row in dict_all_values[BS]:
            # Add the value of all the same BS in the avg of each descriptor. (Calculate the average of each descriptor).
            avg_LIE += row[4]
            avg_Residence_time += row[7]
            avg_Delta_G += row[6]
            avg_SASA += row[12]
            avg_HB += row[13]
            
            # Add the descriptors of each row to the list of each descriptor created before.
            LIE_list.append(row[4])
            RT_list.append(row[7])
            Delta_G_list.append(row[6])
            SASA_list.append(row[12])
            HB_list.append(row[13])

        # Once finished the loop, calculate the average of each descriptor.
        avg_LIE = avg_LIE/num_dyns
        avg_RT = avg_Residence_time/num_dyns
        avg_DeltaG = avg_Delta_G/num_dyns
        avg_SASA = avg_SASA/num_dyns
        avg_HB = avg_HB/num_dyns

        # Catch the best BS for each Descriptor.
        best_LIE = min(LIE_list)
        best_RT = max(RT_list)
        best_DeltaG = min(Delta_G_list)
        best_SASA = min(SASA_list)
        best_HB = max(HB_list)
       
        #Add the descriptors in the Excel file.
        hoja["C" + str(count_excel)] = BS
        hoja["D" + str(count_excel)] = count_dyns 
        hoja["E" + str(count_excel)] = best_DeltaG
        hoja["F" + str(count_excel)] = avg_DeltaG
        hoja["G" + str(count_excel)] = best_SASA
        hoja["H" + str(count_excel)] = avg_SASA
        hoja["I" + str(count_excel)] = best_RT
        hoja["J" + str(count_excel)] = avg_RT
        hoja["K" + str(count_excel)] = best_LIE
        hoja["L" + str(count_excel)] = avg_LIE
        hoja["M" + str(count_excel)] = best_HB
        hoja["N" + str(count_excel)] = avg_HB
        
        # Add one value to the count of the Excel lines (go to the next line).
        count_excel += 1


    #######################################################
    ###         Save Excel file                         ### 
    #######################################################
    # Print the final step of saving the Average Excel file.
    print("5. Save the Excel Average File as " + str(ligand) + "_avg_table.xlsx ")
    
    # Save the Average Excel file.
    wb_output.save(str(ligand) + "_avg_table" + ".xlsx")

    # Print the end of the creation of the Excel file.
    print("File create")
    print("")
    print(">>> End ")



def cmdlineparse():
    # Parse the argument needed to read the information.
    parser = ArgumentParser(description="command line arguments")
    parser.add_argument("-excel_path" , dest="excel_path"   , required=True, help=" Path to know the Excel file we want to convert to Average Excel ") 
    
    args=parser.parse_args()
    return args

# Initial information.
def prog_info() :
  t = datetime.now()
  format_date = "%d-%m-%Y %H:%M:%S"
  ti= t.strftime(format_date)
  print ( "... ... ... ... ... ... " )
  print ( "... fdMD_Avg_Table  ... " )
  print ( "...     ( 2021 )    ... " )
  print ( "...     ........    ... " )
  print ( "... ... ... ... ... ... " )
  print ( " ",ti )
  print ( "... ... ... ... ... ... " )
  print ( " " )

# End information.
def prog_END() :
  t = datetime.now()
  format_date = "%d-%m-%Y %H:%M:%S"
  tf= t.strftime(format_date)
  print ( "... ... ... ... ... ... " )
  print ( "...  fdMD_Avg_Table ... " )
  print ( "...     ( 2021 )    ... " )
  print ( "...     ........    ... " )
  print ( "... ... ... ... ... ... " )
  print ( " ",tf )
  print ( "... ... ... ... ... ... " )
  print ( " " )

if __name__ == '__main__':
  # Call to the initial information.
  prog_info()
  
  # Call the main information (to generate the Excel file).
  main()
  
  # Call the Final information.
  prog_END()

